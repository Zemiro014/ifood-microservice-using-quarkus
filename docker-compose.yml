# terá todos os serviços necessários para o projecto funcionar: banco de dados, Kafka, ActiveMQ, nossas aplicações :porta,
version: "3.7"
services:
  postgres_cadastro:
    container_name: postgres_cadastro_ifood
    image: postgres:12.2
    environment:
      POSTGRES_USER: cadastro
      POSTGRES_PASSWORD: cadastro
    ports:
      - "5432:5432"
  postgres_marketplace:
    container_name: postgres_marketplace_ifood
    image: postgres:12.2
    environment:
      POSTGRES_USER: marketplace
      POSTGRES_PASSWORD: marketplace
    ports:
      - "5433:5432"

# Adicionando o serviço keycloak: responsável em gerenciar acesso de usuários ao sistema ifood (todos os modulos usarão este serviço)
  keycloak_ifood:
    container_name: keycloak_ifood
    image: jboss/keycloak:13.0.1
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      DB_VENDOR: h2
    ports:
      - "8180:8080"

# Adicionando o JAEGER: usado para delinear (mapear) uma requisição até ao banco de dados para ver aonde está demorando mais tempo, ver o tipo de resposta e o que foi passado
  jaeger_ifood:
    container_name: jaeger_ifood
    image: jaegertracing/all-in-one:1.22
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"

# Adicionando o service Prometheus: responsável em buscar as metricas da nossa aplicação e salvando-os
  prometheus_ifood:
    container_name: prometheus_ifood
    image: prometheus-ifood
    network_mode: "host"

# Adicionando o serevice grafana: será usado para expor os dados do promotheus de modo a construir um dashboard
  grafana_ifood:
    container_name: grafana_ifood
    image: grafana/grafana:6.5.0
    network_mode: "host"

# Adicionando o service de mensageria ActiveMQ para publisher e Subscriber (envio e consumo de mensagem)
  artemis_ifood:
    container_name: artemis_ifood
    image: vromero/activemq-artemis:2.11.0
    ports:
      - "5672:5672"
      - "8161:8161"
      - "61616:61616"
      - "49154:49154"
    environment:
      ARTEMIS_USERNAME: admin
      ARTEMIS_PASSWORD: admin

# Adicionando o service MongoDB para armazenar os dados do microservice Pedido
  mongodb_ifood:
    container_name: mongodb_ifood
    image: mongo:4.2.5-bionic
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: pedido
      MONGO_INITDB_ROOT_PASSWORD: pedido
      MONGO_INITDB_DATABASE: pedido

# Adicionando serviços   para mensageria usando Kafka
  zookeeper:
    container_name: zookeeper_container
    image: debezium/zookeeper:1.1
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
  kafka:
    container_name: kafka_container
    image: debezium/kafka:1.1
    ports:
      - 9092:9092
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181

# Uma das interfaces Webb para o Kafka
  kafdrop:
    container_name: kafdrop_container
    image: obsidiandynamics/kafdrop:3.24.0
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    ports:
      - 9000:9000
    depends_on:
      - kafka

# Adicionando os serviços ElasticSearch e Kibana; ElasticSearch é uma ferramenta de busca distruída. O kibana é uma interface gráfica que ajuda a criar DashBoard
  # se ocorrer [1]: max virtual memory areas vm.max_map_count [65530] is too low,
  # increase to at least [262144]
  # sudo sysctl -w vm.max_map_count=262144

  elastic:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.2
    network_mode: "host"
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.6.2
    network_mode: "host"
    environment:
      ELASTICSEARCH_HOSTS: http://localhost:9200

# Serviço de centralizar os LOGs
  logstash:
    container_name: logstash_ifood
    image: docker.elastic.co/logstash/logstash-oss:6.8.2
    volumes:
      - source: ./pipelines
        target: /usr/share/logstash/pipeline
        type: bind
    network_mode: "host"
    depends_on:
      - elastic